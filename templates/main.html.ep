<!DOCTYPE html>
<html>
    <head>
        <title><%= $title %></title>
        <link rel="stylesheet" href="/stylesheet.css" type="text/css" />
        <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
        <script type="text/javascript" src="/spotify-web-api.js"></script>
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    </head>

    <body style="zoom: 1; background-image: url(<%= $background %>);">
        <h1 id="artist"><%= $artist %></h1>
        <h2 id="track"><%= $track %></h2>
        <h3 id="album"><%= $album %></h3>

        <!--
        <div class="panel">
            <div class="leftlabel">Click Me!</div>
            <div class="panelinner">
                <div class="search">
                    <p>
                        <input type="text" id="searchbox" placeholder="Search songs" />
                        <input type="button" id="search" value="Search" />
                    </p>

                    <p>
                        <ul id="results"></ul>
                    </p>
                </div>
            </div>
        </div>
        -->

        <div class="bottom">
            <div class="left">
                <h2>Spot</h2>
                <input type="text" id="searchbox" placeholder="Search" /><br /><br />
                <a id='spotify'><i class="fa fa-spotify fa-3x"></i></a>
                <a id='playpause'><i class="fa fa-pause fa-3x"></i></a>
            </div>

            <div class="center">
                <h4>Results</h4>
                <ul id="results"></ul>
            </div>

            <div class="right">
                <h4>Coming Up</h4>
                <ul id="playlist"></ul>
            </div>
        </div>

        <script type="text/javascript">
            // http://stackoverflow.com/questions/7837456/comparing-two-arrays-in-javascript
            // attach the .equals method to Array's prototype to call it on any array
            Array.prototype.equals = function (array) {
                // if the other array is a falsy value, return
                if (!array)
                    return false;

                // compare lengths - can save a lot of time
                if (this.length != array.length)
                    return false;

                for (var i = 0, l=this.length; i < l; i++) {
                    // Check if we have nested arrays
                    if (this[i] instanceof Array && array[i] instanceof Array) {
                        // recurse into the nested arrays
                        if (!this[i].equals(array[i]))
                            return false;
                    }
                    else if (this[i] != array[i]) {
                        // Warning - two different object instances will never be equal: {x:20} != {x:20}
                        return false;
                    }
                }
                return true;
            }

            // http://stackoverflow.com/questions/14042193/how-to-trigger-an-event-in-input-text-after-i-stop-typing-writing
            //
            // $('#element').donetyping(callback[, timeout=1000])
            // Fires callback when a user has finished typing. This is determined by the time elapsed
            // since the last keystroke and timeout parameter or the blur event--whichever comes first.
            //   @callback: function to be called when even triggers
            //   @timeout:  (default=1000) timeout, in ms, to to wait before triggering event if not
            //              caused by blur.
            // Requires jQuery 1.7+
            //
            ;(function($){
                $.fn.extend({
                    donetyping: function(callback,timeout){
                        timeout = timeout || 1e3; // 1 second default timeout
                        var timeoutReference,
                        doneTyping = function(el){
                            if (!timeoutReference) return;
                            timeoutReference = null;
                            callback.call(el);
                        };
                        return this.each(function(i,el){
                            var $el = $(el);
                            // Chrome Fix (Use keyup over keypress to detect backspace)
                            // thank you @palerdot
                            $el.is(':input') && $el.on('keyup keypress',function(e){
                                // This catches the backspace button in chrome, but also prevents
                                // the event from triggering too premptively. Without this line,
                                // using tab/shift+tab will make the focused element fire the callback.
                                if (e.type=='keyup' && e.keyCode!=8) return;

                                // Check if timeout has been set. If it has, "reset" the clock and
                                // start over again.
                                if (timeoutReference) clearTimeout(timeoutReference);
                                timeoutReference = setTimeout(function(){
                                    // if we made it here, our timeout has elapsed. Fire the
                                    // callback
                                    doneTyping(el);
                                }, timeout);
                            }).on('blur',function(){
                                // If we can, fire the event since we're leaving the field
                                doneTyping(el);
                            });
                        });
                    }
                });
            })(jQuery);

            var spotify = new SpotifyWebApi();
            var artist = '<%= $artist_id %>'; // use this to track artist changes (and update background)
            var playlist = Array();

            $(document).on('click', 'a[data-track-results]', function(e) {
                var a = $(e.target.parentNode);
                var uri = a.attr('data-track-results');
                var track = uri.split(':')[2];

                spotify.getTrack(track, function(err, data) {
                    console.log("getTrack:");
                    console.log(data);

                    $.get('http://' + window.location.host + '/append/' + uri, function(list, status) {
                        if (status !== 'success') {
                            alert("Error adding track");
                            console.log("Error adding track!");
                            console.log(data);
                        }
                    });
                });
            });

            $(document).on('click', 'a[data-track-playlist]', function(e) {
                var a = $(e.target);
                var uri = a.attr('data-track-playlist');
                //var track = uri.split(':')[2];

                console.log("voting for track " + uri);

                $.get('http://' + window.location.host + '/vote/' + uri, function(data, status) {
                    if (status !== 'success') {
                        alert('Error - call Cam!');
                        console.log("Error voting for track");
                        console.log(data);
                    }
                });
            });

            $('#searchbox').donetyping(function() {
                var query = $('#searchbox').val();
                console.log("Searching for: " + query);

                $('#results').empty();

                spotify.searchTracks(query, {limit: 20}, function(err, data) {
                    console.log("searchTracks:");
                    console.log(data);

                    $.each(data.tracks.items, function(key, value) {
                        $('#results').append(
                            //$('<li>').append(value.artists[0].name + ' - ' + value.name)
                            $('<li>').append(
                                $('<a>').attr('data-track-results', value.uri).append(
                                    $('<span>').attr('class', 'track').append(value.name + ' ')
                                ).append(
                                    $('<span>').attr('class', 'artist').append(value.artists[0].name)
                                )
                            )
                        );
                    });
                });
            });

            $('#playpause').on('click', function(e) {
                $.get('http://' + window.location.host + '/playpause', function(data) {
                    console.log(data);
                });
            });

            $('#spotify').on('click', function(e) {
                $.get('http://' + window.location.host + '/start', function(data) {
                    console.log(data);
                });
            });

            window.setInterval(function() {
                $.get('http://' + window.location.host + '/status', function(data, status) {
                    if (status !== 'success') {
                        return;
                    }

                    $('#artist').text(data.track.artist_resource.name);
                    $('#track').text(data.track.track_resource.name);
                    $('#album').text(data.track.album_resource.name);

                    document.title = data.track.artist_resource.name + ' - ' + data.track.track_resource.name;

                    if (artist !== data.track.artist_resource.uri) {
                        var artist_id = data.track.artist_resource.uri.split(':')[2];
                        $.get('https://api.spotify.com/v1/artists/' + artist_id, function(res, status) {
                            if (status === 'success') {
                                $('body').css('background-image', "url('" + res.images[0].url + "')");
                            }
                        });

                        artist = data.track.artist_resource.uri;
                    }

                    data.playlist = $.map(data.playlist, function(n, i) { return n.split(':')[2] });

                    if (!playlist.equals(data.playlist)) {
                        $('#playlist').empty();
                        spotify.getTracks(data.playlist, function(err, data) {
                            $.each(data.tracks, function(key, val) {
                                $('#playlist').append(
                                    $('<li>').append(
                                        $('<a>').attr('class', 'track').attr('data-track-playlist', val.uri).append('+1')
                                    ).append(
                                        $('<span>').attr('class', 'track').append(' ' + val.name + ' ')
                                    ).append(
                                        $('<span>').attr('class', 'artist').append(val.artists[0].name)
                                    )
                                );
                            });
                        });

                        playlist = data.playlist;
                    }

                    //console.log(data);
                });
            }, 2000);
        </script>
    </body>
</html>
